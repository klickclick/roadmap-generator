"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get CONTAINERS () {
        return CONTAINERS;
    },
    get HEADINGS () {
        return HEADINGS;
    },
    get LIST_ITEM_BLOCKS () {
        return LIST_ITEM_BLOCKS;
    },
    get TABLE_BLOCKS () {
        return TABLE_BLOCKS;
    },
    get TEXT_CONTAINERS () {
        return TEXT_CONTAINERS;
    },
    get TOP_LEVEL_BLOCKS () {
        return TOP_LEVEL_BLOCKS;
    },
    get V1_MARKS () {
        return V1_MARKS;
    },
    get V1_NODE_TYPES () {
        return V1_NODE_TYPES;
    },
    get VOID_BLOCKS () {
        return VOID_BLOCKS;
    }
});
var _blocks = require("./blocks.js");
var _inlines = require("./inlines.js");
var _marks = require("./marks.js");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var TOP_LEVEL_BLOCKS = [
    _blocks.BLOCKS.PARAGRAPH,
    _blocks.BLOCKS.HEADING_1,
    _blocks.BLOCKS.HEADING_2,
    _blocks.BLOCKS.HEADING_3,
    _blocks.BLOCKS.HEADING_4,
    _blocks.BLOCKS.HEADING_5,
    _blocks.BLOCKS.HEADING_6,
    _blocks.BLOCKS.OL_LIST,
    _blocks.BLOCKS.UL_LIST,
    _blocks.BLOCKS.HR,
    _blocks.BLOCKS.QUOTE,
    _blocks.BLOCKS.EMBEDDED_ENTRY,
    _blocks.BLOCKS.EMBEDDED_ASSET,
    _blocks.BLOCKS.EMBEDDED_RESOURCE,
    _blocks.BLOCKS.TABLE
];
var LIST_ITEM_BLOCKS = [
    _blocks.BLOCKS.PARAGRAPH,
    _blocks.BLOCKS.HEADING_1,
    _blocks.BLOCKS.HEADING_2,
    _blocks.BLOCKS.HEADING_3,
    _blocks.BLOCKS.HEADING_4,
    _blocks.BLOCKS.HEADING_5,
    _blocks.BLOCKS.HEADING_6,
    _blocks.BLOCKS.OL_LIST,
    _blocks.BLOCKS.UL_LIST,
    _blocks.BLOCKS.HR,
    _blocks.BLOCKS.QUOTE,
    _blocks.BLOCKS.EMBEDDED_ENTRY,
    _blocks.BLOCKS.EMBEDDED_ASSET,
    _blocks.BLOCKS.EMBEDDED_RESOURCE
];
var TABLE_BLOCKS = [
    _blocks.BLOCKS.TABLE,
    _blocks.BLOCKS.TABLE_ROW,
    _blocks.BLOCKS.TABLE_CELL,
    _blocks.BLOCKS.TABLE_HEADER_CELL
];
var VOID_BLOCKS = [
    _blocks.BLOCKS.HR,
    _blocks.BLOCKS.EMBEDDED_ENTRY,
    _blocks.BLOCKS.EMBEDDED_ASSET,
    _blocks.BLOCKS.EMBEDDED_RESOURCE
];
var _obj;
var CONTAINERS = (_obj = {}, _define_property(_obj, _blocks.BLOCKS.OL_LIST, [
    _blocks.BLOCKS.LIST_ITEM
]), _define_property(_obj, _blocks.BLOCKS.UL_LIST, [
    _blocks.BLOCKS.LIST_ITEM
]), _define_property(_obj, _blocks.BLOCKS.LIST_ITEM, LIST_ITEM_BLOCKS), _define_property(_obj, _blocks.BLOCKS.QUOTE, [
    _blocks.BLOCKS.PARAGRAPH
]), _define_property(_obj, _blocks.BLOCKS.TABLE, [
    _blocks.BLOCKS.TABLE_ROW
]), _define_property(_obj, _blocks.BLOCKS.TABLE_ROW, [
    _blocks.BLOCKS.TABLE_CELL,
    _blocks.BLOCKS.TABLE_HEADER_CELL
]), _define_property(_obj, _blocks.BLOCKS.TABLE_CELL, [
    _blocks.BLOCKS.PARAGRAPH,
    _blocks.BLOCKS.UL_LIST,
    _blocks.BLOCKS.OL_LIST
]), _define_property(_obj, _blocks.BLOCKS.TABLE_HEADER_CELL, [
    _blocks.BLOCKS.PARAGRAPH
]), _obj);
var HEADINGS = [
    _blocks.BLOCKS.HEADING_1,
    _blocks.BLOCKS.HEADING_2,
    _blocks.BLOCKS.HEADING_3,
    _blocks.BLOCKS.HEADING_4,
    _blocks.BLOCKS.HEADING_5,
    _blocks.BLOCKS.HEADING_6
];
var TEXT_CONTAINERS = [
    _blocks.BLOCKS.PARAGRAPH
].concat(_to_consumable_array(HEADINGS));
var V1_NODE_TYPES = [
    _blocks.BLOCKS.DOCUMENT,
    _blocks.BLOCKS.PARAGRAPH,
    _blocks.BLOCKS.HEADING_1,
    _blocks.BLOCKS.HEADING_2,
    _blocks.BLOCKS.HEADING_3,
    _blocks.BLOCKS.HEADING_4,
    _blocks.BLOCKS.HEADING_5,
    _blocks.BLOCKS.HEADING_6,
    _blocks.BLOCKS.OL_LIST,
    _blocks.BLOCKS.UL_LIST,
    _blocks.BLOCKS.LIST_ITEM,
    _blocks.BLOCKS.HR,
    _blocks.BLOCKS.QUOTE,
    _blocks.BLOCKS.EMBEDDED_ENTRY,
    _blocks.BLOCKS.EMBEDDED_ASSET,
    _inlines.INLINES.HYPERLINK,
    _inlines.INLINES.ENTRY_HYPERLINK,
    _inlines.INLINES.ASSET_HYPERLINK,
    _inlines.INLINES.EMBEDDED_ENTRY,
    'text'
];
var V1_MARKS = [
    _marks.MARKS.BOLD,
    _marks.MARKS.CODE,
    _marks.MARKS.ITALIC,
    _marks.MARKS.UNDERLINE
];
