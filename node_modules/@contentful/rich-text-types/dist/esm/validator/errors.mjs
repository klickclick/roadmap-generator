function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
export var typeMismatchError = function(param) {
    var path = param.path, property = param.property, typeName = param.typeName, value = param.value;
    return {
        details: 'The type of "'.concat(property, '" is incorrect, expected type: ').concat(typeName),
        name: 'type',
        path: path.toArray(),
        type: typeName,
        value: value
    };
};
export var minSizeError = function(param) {
    var min = param.min, value = param.value, path = param.path;
    return {
        name: 'size',
        min: min,
        path: path.toArray(),
        details: "Size must be at least ".concat(min),
        value: value
    };
};
export var maxSizeError = function(param) {
    var max = param.max, value = param.value, path = param.path;
    return {
        name: 'size',
        max: max,
        path: path.toArray(),
        details: "Size must be at most ".concat(max),
        value: value
    };
};
export var enumError = function(param) {
    var expected = param.expected, value = param.value, path = param.path;
    return {
        details: "Value must be one of expected values",
        name: 'in',
        expected: _to_consumable_array(expected).sort(),
        path: path.toArray(),
        value: value
    };
};
export var unknownPropertyError = function(param) {
    var property = param.property, path = param.path;
    return {
        details: 'The property "'.concat(property, '" is not expected'),
        name: 'unexpected',
        path: path.toArray()
    };
};
export var requiredPropertyError = function(param) {
    var property = param.property, path = param.path;
    return {
        details: 'The property "'.concat(property, '" is required here'),
        name: 'required',
        path: path.toArray()
    };
};
