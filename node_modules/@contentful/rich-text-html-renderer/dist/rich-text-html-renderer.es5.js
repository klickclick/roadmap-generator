'use strict';

var richTextTypes = require('@contentful/rich-text-types');
var escape = require('escape-html');

const attributeValue = (value)=>`"${value.replace(/"/g, '&quot;')}"`;
const defaultNodeRenderers = {
    [richTextTypes.BLOCKS.PARAGRAPH]: (node, next)=>`<p>${next(node.content)}</p>`,
    [richTextTypes.BLOCKS.HEADING_1]: (node, next)=>`<h1>${next(node.content)}</h1>`,
    [richTextTypes.BLOCKS.HEADING_2]: (node, next)=>`<h2>${next(node.content)}</h2>`,
    [richTextTypes.BLOCKS.HEADING_3]: (node, next)=>`<h3>${next(node.content)}</h3>`,
    [richTextTypes.BLOCKS.HEADING_4]: (node, next)=>`<h4>${next(node.content)}</h4>`,
    [richTextTypes.BLOCKS.HEADING_5]: (node, next)=>`<h5>${next(node.content)}</h5>`,
    [richTextTypes.BLOCKS.HEADING_6]: (node, next)=>`<h6>${next(node.content)}</h6>`,
    [richTextTypes.BLOCKS.EMBEDDED_ENTRY]: (node, next)=>`<div>${next(node.content)}</div>`,
    [richTextTypes.BLOCKS.EMBEDDED_RESOURCE]: (node, next)=>`<div>${next(node.content)}</div>`,
    [richTextTypes.BLOCKS.UL_LIST]: (node, next)=>`<ul>${next(node.content)}</ul>`,
    [richTextTypes.BLOCKS.OL_LIST]: (node, next)=>`<ol>${next(node.content)}</ol>`,
    [richTextTypes.BLOCKS.LIST_ITEM]: (node, next)=>`<li>${next(node.content)}</li>`,
    [richTextTypes.BLOCKS.QUOTE]: (node, next)=>`<blockquote>${next(node.content)}</blockquote>`,
    [richTextTypes.BLOCKS.HR]: ()=>'<hr/>',
    [richTextTypes.BLOCKS.TABLE]: (node, next)=>`<table>${next(node.content)}</table>`,
    [richTextTypes.BLOCKS.TABLE_ROW]: (node, next)=>`<tr>${next(node.content)}</tr>`,
    [richTextTypes.BLOCKS.TABLE_HEADER_CELL]: (node, next)=>`<th>${next(node.content)}</th>`,
    [richTextTypes.BLOCKS.TABLE_CELL]: (node, next)=>`<td>${next(node.content)}</td>`,
    [richTextTypes.INLINES.ASSET_HYPERLINK]: (node)=>defaultInline(richTextTypes.INLINES.ASSET_HYPERLINK, node),
    [richTextTypes.INLINES.ENTRY_HYPERLINK]: (node)=>defaultInline(richTextTypes.INLINES.ENTRY_HYPERLINK, node),
    [richTextTypes.INLINES.RESOURCE_HYPERLINK]: (node)=>defaultInlineResource(richTextTypes.INLINES.RESOURCE_HYPERLINK, node),
    [richTextTypes.INLINES.EMBEDDED_ENTRY]: (node)=>defaultInline(richTextTypes.INLINES.EMBEDDED_ENTRY, node),
    [richTextTypes.INLINES.EMBEDDED_RESOURCE]: (node)=>defaultInlineResource(richTextTypes.INLINES.EMBEDDED_RESOURCE, node),
    [richTextTypes.INLINES.HYPERLINK]: (node, next)=>{
        const href = typeof node.data.uri === 'string' ? node.data.uri : '';
        return `<a href=${attributeValue(href)}>${next(node.content)}</a>`;
    }
};
const defaultMarkRenderers = {
    [richTextTypes.MARKS.BOLD]: (text)=>`<b>${text}</b>`,
    [richTextTypes.MARKS.ITALIC]: (text)=>`<i>${text}</i>`,
    [richTextTypes.MARKS.UNDERLINE]: (text)=>`<u>${text}</u>`,
    [richTextTypes.MARKS.CODE]: (text)=>`<code>${text}</code>`,
    [richTextTypes.MARKS.SUPERSCRIPT]: (text)=>`<sup>${text}</sup>`,
    [richTextTypes.MARKS.SUBSCRIPT]: (text)=>`<sub>${text}</sub>`,
    [richTextTypes.MARKS.STRIKETHROUGH]: (text)=>`<s>${text}</s>`
};
const defaultInline = (type, node)=>`<span>type: ${escape(type)} id: ${escape(node.data.target.sys.id)}</span>`;
const defaultInlineResource = (type, node)=>`<span>type: ${escape(type)} urn: ${escape(node.data.target.sys.urn)}</span>`;
function documentToHtmlString(richTextDocument, options = {}) {
    if (!richTextDocument || !richTextDocument.content) {
        return '';
    }
    let processedDocument = richTextDocument;
    if (options.stripEmptyTrailingParagraph) {
        processedDocument = richTextTypes.helpers.stripEmptyTrailingParagraphFromDocument(richTextDocument);
    }
    return nodeListToHtmlString(processedDocument.content, {
        renderNode: {
            ...defaultNodeRenderers,
            ...options.renderNode
        },
        renderMark: {
            ...defaultMarkRenderers,
            ...options.renderMark
        },
        preserveWhitespace: options.preserveWhitespace
    });
}
function nodeListToHtmlString(nodes, { renderNode, renderMark, preserveWhitespace }) {
    return nodes.map((node)=>nodeToHtmlString(node, {
            renderNode,
            renderMark,
            preserveWhitespace
        })).join('');
}
function nodeToHtmlString(node, { renderNode, renderMark, preserveWhitespace }) {
    if (richTextTypes.helpers.isText(node)) {
        let nodeValue = escape(node.value);
        if (preserveWhitespace) {
            nodeValue = nodeValue.replace(/\n/g, '<br/>').replace(/ {2,}/g, (match)=>'&nbsp;'.repeat(match.length));
        }
        if (node.marks.length > 0) {
            return node.marks.reduce((value, mark)=>{
                if (!renderMark[mark.type]) {
                    return value;
                }
                return renderMark[mark.type](value);
            }, nodeValue);
        }
        return nodeValue;
    } else {
        const nextNode = (nodes)=>nodeListToHtmlString(nodes, {
                renderMark,
                renderNode,
                preserveWhitespace
            });
        if (!node.nodeType || !renderNode[node.nodeType]) {
            return '';
        }
        return renderNode[node.nodeType](node, nextNode);
    }
}

exports.documentToHtmlString = documentToHtmlString;
//# sourceMappingURL=rich-text-html-renderer.es5.js.map
