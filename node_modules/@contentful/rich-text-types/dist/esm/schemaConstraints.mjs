function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
import { BLOCKS } from './blocks.mjs';
import { INLINES } from './inlines.mjs';
import { MARKS } from './marks.mjs';
export var TOP_LEVEL_BLOCKS = [
    BLOCKS.PARAGRAPH,
    BLOCKS.HEADING_1,
    BLOCKS.HEADING_2,
    BLOCKS.HEADING_3,
    BLOCKS.HEADING_4,
    BLOCKS.HEADING_5,
    BLOCKS.HEADING_6,
    BLOCKS.OL_LIST,
    BLOCKS.UL_LIST,
    BLOCKS.HR,
    BLOCKS.QUOTE,
    BLOCKS.EMBEDDED_ENTRY,
    BLOCKS.EMBEDDED_ASSET,
    BLOCKS.EMBEDDED_RESOURCE,
    BLOCKS.TABLE
];
export var LIST_ITEM_BLOCKS = [
    BLOCKS.PARAGRAPH,
    BLOCKS.HEADING_1,
    BLOCKS.HEADING_2,
    BLOCKS.HEADING_3,
    BLOCKS.HEADING_4,
    BLOCKS.HEADING_5,
    BLOCKS.HEADING_6,
    BLOCKS.OL_LIST,
    BLOCKS.UL_LIST,
    BLOCKS.HR,
    BLOCKS.QUOTE,
    BLOCKS.EMBEDDED_ENTRY,
    BLOCKS.EMBEDDED_ASSET,
    BLOCKS.EMBEDDED_RESOURCE
];
export var TABLE_BLOCKS = [
    BLOCKS.TABLE,
    BLOCKS.TABLE_ROW,
    BLOCKS.TABLE_CELL,
    BLOCKS.TABLE_HEADER_CELL
];
export var VOID_BLOCKS = [
    BLOCKS.HR,
    BLOCKS.EMBEDDED_ENTRY,
    BLOCKS.EMBEDDED_ASSET,
    BLOCKS.EMBEDDED_RESOURCE
];
var _obj;
export var CONTAINERS = (_obj = {}, _define_property(_obj, BLOCKS.OL_LIST, [
    BLOCKS.LIST_ITEM
]), _define_property(_obj, BLOCKS.UL_LIST, [
    BLOCKS.LIST_ITEM
]), _define_property(_obj, BLOCKS.LIST_ITEM, LIST_ITEM_BLOCKS), _define_property(_obj, BLOCKS.QUOTE, [
    BLOCKS.PARAGRAPH
]), _define_property(_obj, BLOCKS.TABLE, [
    BLOCKS.TABLE_ROW
]), _define_property(_obj, BLOCKS.TABLE_ROW, [
    BLOCKS.TABLE_CELL,
    BLOCKS.TABLE_HEADER_CELL
]), _define_property(_obj, BLOCKS.TABLE_CELL, [
    BLOCKS.PARAGRAPH,
    BLOCKS.UL_LIST,
    BLOCKS.OL_LIST
]), _define_property(_obj, BLOCKS.TABLE_HEADER_CELL, [
    BLOCKS.PARAGRAPH
]), _obj);
export var HEADINGS = [
    BLOCKS.HEADING_1,
    BLOCKS.HEADING_2,
    BLOCKS.HEADING_3,
    BLOCKS.HEADING_4,
    BLOCKS.HEADING_5,
    BLOCKS.HEADING_6
];
export var TEXT_CONTAINERS = [
    BLOCKS.PARAGRAPH
].concat(_to_consumable_array(HEADINGS));
export var V1_NODE_TYPES = [
    BLOCKS.DOCUMENT,
    BLOCKS.PARAGRAPH,
    BLOCKS.HEADING_1,
    BLOCKS.HEADING_2,
    BLOCKS.HEADING_3,
    BLOCKS.HEADING_4,
    BLOCKS.HEADING_5,
    BLOCKS.HEADING_6,
    BLOCKS.OL_LIST,
    BLOCKS.UL_LIST,
    BLOCKS.LIST_ITEM,
    BLOCKS.HR,
    BLOCKS.QUOTE,
    BLOCKS.EMBEDDED_ENTRY,
    BLOCKS.EMBEDDED_ASSET,
    INLINES.HYPERLINK,
    INLINES.ENTRY_HYPERLINK,
    INLINES.ASSET_HYPERLINK,
    INLINES.EMBEDDED_ENTRY,
    'text'
];
export var V1_MARKS = [
    MARKS.BOLD,
    MARKS.CODE,
    MARKS.ITALIC,
    MARKS.UNDERLINE
];
